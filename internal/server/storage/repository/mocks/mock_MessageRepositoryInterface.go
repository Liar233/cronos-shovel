// Code generated by mockery v2.36.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/Liar233/cronos-shovel/internal/server/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MessageMockRepository is an autogenerated mock type for the MessageRepositoryInterface type
type MessageMockRepository struct {
	mock.Mock
}

type MessageMockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageMockRepository) EXPECT() *MessageMockRepository_Expecter {
	return &MessageMockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, msg
func (_m *MessageMockRepository) Create(ctx context.Context, msg *model.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageMockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MessageMockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *model.Message
func (_e *MessageMockRepository_Expecter) Create(ctx interface{}, msg interface{}) *MessageMockRepository_Create_Call {
	return &MessageMockRepository_Create_Call{Call: _e.mock.On("Create", ctx, msg)}
}

func (_c *MessageMockRepository_Create_Call) Run(run func(ctx context.Context, msg *model.Message)) *MessageMockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Message))
	})
	return _c
}

func (_c *MessageMockRepository_Create_Call) Return(_a0 error) *MessageMockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageMockRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Message) error) *MessageMockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MessageMockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageMockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MessageMockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MessageMockRepository_Expecter) Delete(ctx interface{}, id interface{}) *MessageMockRepository_Delete_Call {
	return &MessageMockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MessageMockRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MessageMockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MessageMockRepository_Delete_Call) Return(_a0 error) *MessageMockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageMockRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MessageMockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *MessageMockRepository) FindOne(ctx context.Context, id uuid.UUID) (*model.Message, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageMockRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MessageMockRepository_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MessageMockRepository_Expecter) FindOne(ctx interface{}, id interface{}) *MessageMockRepository_FindOne_Call {
	return &MessageMockRepository_FindOne_Call{Call: _e.mock.On("FindOne", ctx, id)}
}

func (_c *MessageMockRepository_FindOne_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MessageMockRepository_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MessageMockRepository_FindOne_Call) Return(_a0 *model.Message, _a1 error) *MessageMockRepository_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageMockRepository_FindOne_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Message, error)) *MessageMockRepository_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx
func (_m *MessageMockRepository) GetList(ctx context.Context) ([]*model.Message, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageMockRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MessageMockRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MessageMockRepository_Expecter) GetList(ctx interface{}) *MessageMockRepository_GetList_Call {
	return &MessageMockRepository_GetList_Call{Call: _e.mock.On("GetList", ctx)}
}

func (_c *MessageMockRepository_GetList_Call) Run(run func(ctx context.Context)) *MessageMockRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MessageMockRepository_GetList_Call) Return(_a0 []*model.Message, _a1 error) *MessageMockRepository_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageMockRepository_GetList_Call) RunAndReturn(run func(context.Context) ([]*model.Message, error)) *MessageMockRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, msg
func (_m *MessageMockRepository) Update(ctx context.Context, msg *model.Message) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageMockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MessageMockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *model.Message
func (_e *MessageMockRepository_Expecter) Update(ctx interface{}, msg interface{}) *MessageMockRepository_Update_Call {
	return &MessageMockRepository_Update_Call{Call: _e.mock.On("Update", ctx, msg)}
}

func (_c *MessageMockRepository_Update_Call) Run(run func(ctx context.Context, msg *model.Message)) *MessageMockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Message))
	})
	return _c
}

func (_c *MessageMockRepository_Update_Call) Return(_a0 error) *MessageMockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageMockRepository_Update_Call) RunAndReturn(run func(context.Context, *model.Message) error) *MessageMockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageMockRepository creates a new instance of MessageMockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageMockRepository {
	mock := &MessageMockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
