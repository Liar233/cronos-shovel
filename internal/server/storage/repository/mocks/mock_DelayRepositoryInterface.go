// Code generated by mockery v2.36.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/Liar233/cronos-shovel/internal/server/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DelayMockRepository is an autogenerated mock type for the DelayRepositoryInterface type
type DelayMockRepository struct {
	mock.Mock
}

type DelayMockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DelayMockRepository) EXPECT() *DelayMockRepository_Expecter {
	return &DelayMockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, delay
func (_m *DelayMockRepository) Create(ctx context.Context, delay *model.Delay) error {
	ret := _m.Called(ctx, delay)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Delay) error); ok {
		r0 = rf(ctx, delay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelayMockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DelayMockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - delay *model.Delay
func (_e *DelayMockRepository_Expecter) Create(ctx interface{}, delay interface{}) *DelayMockRepository_Create_Call {
	return &DelayMockRepository_Create_Call{Call: _e.mock.On("Create", ctx, delay)}
}

func (_c *DelayMockRepository_Create_Call) Run(run func(ctx context.Context, delay *model.Delay)) *DelayMockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Delay))
	})
	return _c
}

func (_c *DelayMockRepository_Create_Call) Return(_a0 error) *DelayMockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DelayMockRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Delay) error) *DelayMockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DelayMockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelayMockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DelayMockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *DelayMockRepository_Expecter) Delete(ctx interface{}, id interface{}) *DelayMockRepository_Delete_Call {
	return &DelayMockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *DelayMockRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *DelayMockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DelayMockRepository_Delete_Call) Return(_a0 error) *DelayMockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DelayMockRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *DelayMockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewDelayMockRepository creates a new instance of DelayMockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDelayMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DelayMockRepository {
	mock := &DelayMockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
