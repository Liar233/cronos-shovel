// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tiktack.proto

package pkg

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TikTack_TikTack_FullMethodName = "/tiktak.TikTack/TikTack"
)

// TikTackClient is the client API for TikTack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TikTackClient interface {
	TikTack(ctx context.Context, in *TikRequest, opts ...grpc.CallOption) (*TackResponse, error)
}

type tikTackClient struct {
	cc grpc.ClientConnInterface
}

func NewTikTackClient(cc grpc.ClientConnInterface) TikTackClient {
	return &tikTackClient{cc}
}

func (c *tikTackClient) TikTack(ctx context.Context, in *TikRequest, opts ...grpc.CallOption) (*TackResponse, error) {
	out := new(TackResponse)
	err := c.cc.Invoke(ctx, TikTack_TikTack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TikTackServer is the grpc API for TikTack service.
// All implementations must embed UnimplementedTikTackServer
// for forward compatibility
type TikTackServer interface {
	TikTack(context.Context, *TikRequest) (*TackResponse, error)
}

// UnimplementedTikTackServer must be embedded to have forward compatible implementations.
type UnimplementedTikTackServer struct {
}

func (UnimplementedTikTackServer) TikTack(context.Context, *TikRequest) (*TackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TikTack not implemented")
}

// UnsafeTikTackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TikTackServer will
// result in compilation errors.
type UnsafeTikTackServer interface {
	mustEmbedUnimplementedTikTackServer()
}

func RegisterTikTackServer(s grpc.ServiceRegistrar, srv TikTackServer) {
	s.RegisterService(&TikTack_ServiceDesc, srv)
}

func _TikTack_TikTack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TikRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TikTackServer).TikTack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TikTack_TikTack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TikTackServer).TikTack(ctx, req.(*TikRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TikTack_ServiceDesc is the grpc.ServiceDesc for TikTack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TikTack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tiktak.TikTack",
	HandlerType: (*TikTackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TikTack",
			Handler:    _TikTack_TikTack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiktack.proto",
}
